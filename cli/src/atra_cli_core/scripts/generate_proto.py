#!/usr/bin/env python3
import subprocess
import shutil
import sys
from pathlib import Path
import argparse

def main():
    parser = argparse.ArgumentParser(description="Generate gRPC Python stubs for Atra.")
    parser.add_argument(
        "--proto_input_dir",
        type=Path,
        required=True,
        help="Directory containing the .proto files (e.g., ATRAROOT/atra-proto/proto/)"
    )
    parser.add_argument(
        "--generated_output_dir",
        type=Path,
        required=True,
        help="Directory to output generated Python stubs (e.g., ATRA_CLI_CORE_DIR/generated/)"
    )
    args = parser.parse_args()
    
    proto_source_dir = args.proto_input_dir.resolve()
    output_dir_for_stubs = args.generated_output_dir.resolve()
    orderbook_proto_file = proto_source_dir / "orderbook.proto"
    
    if not orderbook_proto_file.is_file():
        print(f"Error: Proto file not found at {orderbook_proto_file}", file=sys.stderr)
        sys.exit(1)

    if output_dir_for_stubs.exists():
        print(f"Cleaning existing generated directory: {output_dir_for_stubs}")
        shutil.rmtree(output_dir_for_stubs)
    output_dir_for_stubs.mkdir(parents=True, exist_ok=True)

    print(f"Generating gRPC stubs from {orderbook_proto_file} into {output_dir_for_stubs}")
    
    try:
        protoc_call_args = [
            sys.executable,
            "-m", "grpc_tools.protoc",
            f"-I{proto_source_dir}",
            f"--python_out={output_dir_for_stubs}",
            f"--grpc_python_out={output_dir_for_stubs}",
            str(orderbook_proto_file)
        ]
        compile_result = subprocess.run(protoc_call_args, check=True, capture_output=True, text=True)
 
    except subprocess.CalledProcessError as e:
        print(f"ERROR: gRPC tools compilation failed for {orderbook_proto_file}.", file=sys.stderr)
        print(f"Return code: {e.returncode}", file=sys.stderr)
        print(f"Command: {' '.join(e.cmd)}", file=sys.stderr)
        print(f"Stdout:\n{e.stdout}", file=sys.stderr)
        print(f"Stderr:\n{e.stderr}", file=sys.stderr)
        sys.exit(1)
    except FileNotFoundError:
        print("ERROR: grpc_tools.protoc (or python interpreter) not found. Is grpcio-tools installed in the venv?", file=sys.stderr)
        sys.exit(1)
        
    init_py_path = output_dir_for_stubs / "__init__.py"
    with open(init_py_path, "w") as f:
        f.write("# Generated by generate_proto.py\n")
        f.write("from . import orderbook_pb2\n")
        f.write("from . import orderbook_pb2_grpc\n\n")
        f.write("__all__ = ['orderbook_pb2', 'orderbook_pb2_grpc']\n")

    grpc_file = output_dir_for_stubs / "orderbook_pb2_grpc.py" 
    if grpc_file.is_file():
        content = grpc_file.read_text()
        fixed_content = content.replace(
            "import orderbook_pb2 as orderbook__pb2", 
            "from . import orderbook_pb2 as orderbook__pb2" 
        )
        if fixed_content != content:
            grpc_file.write_text(fixed_content)

if __name__ == "__main__":
    main()
