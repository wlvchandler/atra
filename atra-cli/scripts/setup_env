#!/usr/bin/env python3
import os
import subprocess
import sys
from pathlib import Path
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(message)s',
    handlers=[
        logging.FileHandler('setup.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class ColoredOutput:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

    @staticmethod
    def success(msg):
        return f"{ColoredOutput.GREEN}{msg}{ColoredOutput.ENDC}"

    @staticmethod
    def info(msg):
        return f"{ColoredOutput.BLUE}{msg}{ColoredOutput.ENDC}"

    @staticmethod
    def error(msg):
        return f"{ColoredOutput.RED}{msg}{ColoredOutput.ENDC}"

    @staticmethod
    def bold(msg):
        return f"{ColoredOutput.BOLD}{msg}{ColoredOutput.ENDC}"

def run_command(cmd, check=True, env=None, capture_output=True):
    cmd_str = " ".join(str(x) for x in cmd)
    logging.debug(f"Running command: {cmd_str}")

    try:
        result = subprocess.run(
            cmd,
            check=check,
            env=env,
            capture_output=capture_output,
            text=True
        )
        if result.stdout:
            logging.debug(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        logging.error(f"Command failed: {e}")
        if e.output:
            logging.debug(e.output)
        return False

def main():
    project_dir = Path(__file__).parent.parent
    venv_dir = project_dir / "venv"
    generated_dir = project_dir / "generated"

    print(ColoredOutput.bold("\nðŸ”§ Setting up development environment...\n"))
    print(ColoredOutput.info("ðŸ“¦ Creating virtual environment..."))
    subprocess.run([sys.executable, "-m", "venv", venv_dir],
                  check=True,
                  capture_output=True)

    _hmsg = '\n--------\n-atraCLI-\nHelp:\n\t./invm -h {{book|place} -h}\n--------\n'
    if os.name == "nt":
        activate_file = venv_dir / "Scripts" / "activate.bat"
        message = f"echo {_hmsg}"
    else:
        activate_file = venv_dir / "bin" / "activate"
        message = f'printf "\\033[1;32m{_hmsg}\\033[0m\\n"'

    with open(activate_file, "a") as f:
        f.write(f"\n{message}\n")
    print(ColoredOutput.success("âœ“ Virtual environment created"))

    if os.name == "nt":  # Windows
        python_path = venv_dir / "Scripts" / "python.exe"
        pip_path = venv_dir / "Scripts" / "pip.exe"
        activate_cmd = r".\venv\Scripts\activate"
    else:  # Unix
        python_path = venv_dir / "bin" / "python"
        pip_path = venv_dir / "bin" / "pip"
        activate_cmd = "source venv/bin/activate"

    print(ColoredOutput.info("\nðŸ“¥ Installing requirements..."))
    requirements_file = project_dir / "requirements.txt"
    run_command([pip_path, "install", "-r", requirements_file])
    print(ColoredOutput.success("âœ“ Dependencies installed"))

    generated_dir.mkdir(exist_ok=True)

    print(ColoredOutput.info("\nðŸ”¨ Generating proto files..."))
    proto_script = project_dir / "scripts" / "generate_proto.py"
    run_command([python_path, proto_script])
    print(ColoredOutput.success("âœ“ Proto files generated"))

    print(ColoredOutput.bold("\nâœ¨ Setup complete! Next steps:"))
    print(ColoredOutput.info(f"\n1. Activate virtual environment:"))
    print(f"   {activate_cmd}")
    print(ColoredOutput.info("\n2. Run the CLI:"))
    print("   ./invm <command>")
    print("\n")
    print("You may need to set a link to `atra-cli/invm` in the root directory of the repo")
    print("\n")
    print("linux:\tln -sf atra-cli/invm invm")
    print("\n")

if __name__ == "__main__":
    main()
