name: CI/CD
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'doc/**'
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    
env:
  CARGO_TERM_COLOR: always
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      # MENG/CLOB
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: atra-ob
      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Build Rust
        run: cd atra-ob && cargo build --verbose
      - name: Run Rust tests
        run: cd atra-ob && cargo test --verbose
        
      # CLI
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          cd cli
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list
      - name: Verify Python environment
        run: |
          python --version
          pip --version
          which python
          which pip
      - name: Run Python tests
        run: |
          cd cli
          python -m pip install pytest
          python -m pytest tests/ -v

  integration:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
          
      - name: Prepare Docker Image Tags
        id: prep_tags
        shell: bash
        run: |
          GIT_COMMIT_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "Extracted GIT_COMMIT_SHA_SHORT: $GIT_COMMIT_SHA_SHORT"
          echo "git_commit_sha_short=$GIT_COMMIT_SHA_SHORT" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            RAW_BRANCH_NAME="${{ github.head_ref }}"
          else
            RAW_BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "Raw branch name: $RAW_BRANCH_NAME"
          
          SANITIZED_BRANCH_NAME=$(echo "$RAW_BRANCH_NAME" | sed 's/[^a-zA-Z0-9_.-]/-/g')
          echo "Sanitized branch name: $SANITIZED_BRANCH_NAME"
          echo "sanitized_branch_name=$SANITIZED_BRANCH_NAME" >> $GITHUB_OUTPUT
          
          FINAL_IMAGE_TAG="$SANITIZED_BRANCH_NAME-$GIT_COMMIT_SHA_SHORT"
          echo "Final IMAGE_TAG: $FINAL_IMAGE_TAG"
          echo "final_image_tag=$FINAL_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and export matcher
        uses: docker/build-push-action@v5
        with:
          context: .
          file: atra-ob/Dockerfile
          push: false
          load: true
          tags: atra/matcher:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Install Python dependencies and generate protos
        shell: bash
        run: |
          cd cli
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e . # install cli as a package
          which atra
          mkdir -p generated
          python -m grpc_tools.protoc \
            -I../atra-proto/proto \
            --python_out=./generated \
            --grpc_python_out=./generated \
            ../atra-proto/proto/orderbook.proto
          sed -i 's/import orderbook_pb2/import generated.orderbook_pb2/' generated/orderbook_pb2_grpc.py
          touch generated/__init__.py

          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Start matcher service
        run: |
          docker run -d --name matcher -p 50051:50051 \
            -e BIND_ADDRESS=0.0.0.0:50051 \
            --health-cmd="nc -zv localhost 50051" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=3 \
            --health-start-period=5s \
            atra/matcher:latest
          
          echo "Waiting for matcher service to be healthy..."
          end_time=$((SECONDS + 75))
          healthy="false"

          while [ $SECONDS -lt $end_time ]; do
            health_status=$(docker inspect --format='{{.State.Health.Status}}' matcher 2>/dev/null)

            if [ "$health_status" == "healthy" ]; then
              echo
              echo "Matcher service container is healthy!"
              healthy="true"
              break
            else
              echo -n ". ($health_status) "
            fi
            sleep 2
          done

          if [ "$healthy" != "true" ]; then
            echo
            echo "Matcher service did not become healthy in time."
            echo "--- Docker Logs ---"
            docker logs matcher
            exit 1
          fi
            
      - name: Run integration tests
        env:
          atra_OB_HOST: localhost
        run: |
          cd cli
          chmod +x integration_tests.sh
          ./integration_tests.sh

      - name: Show logs on failure
        if: failure()
        run: |
          echo "--- Docker Compose PS ---"
            docker compose ps
          echo "------"
          echo "--- Docker Compose Logs Matcher ---"
            docker compose logs matcher
          echo "------"
          echo "--- Docker Compose Logs CLI  ---"
            docker compose logs cli
          echo "------"
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
