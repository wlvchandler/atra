name: CI/CD
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'doc/**'
      - '.gitignore'
      - '.github/**'
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: atra-ob

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Build Rust
        run: cd atra-ob && cargo build --verbose

      - name: Run Rust tests
        run: cd atra-ob && cargo test --verbose

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd cli
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list

      - name: Verify Python environment
        run: |
          python --version
          pip --version
          which python
          which pip

      - name: Run Python tests
        run: |
          cd cli
          python -m pip install pytest
          python -m pytest tests/ -v

  integration:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute Docker cache key
        id: docker-cache-key
        run: |
          echo "cache_key=${{ runner.os }}-buildx-$(find . -type f -not -path '*/\.*' -not -path '*/doc/*' -not -path '*/target/*' -not -path '*/__pycache__/*' -exec sha1sum {} \; | sha1sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ steps.docker-cache-key.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install Pip
        run:  python -m pip install --upgrade pip

      - name: Install atra cli
        shell: bash
        run: pip install -e cli

      - name: Create generated protobuf module
        shell: bash
        run: |
          cd cli/src/atra_cli_core
          mkdir -p generated
          python -m grpc_tools.protoc \
            -I../../../atra-proto/proto \
            --python_out=./generated \
            --grpc_python_out=./generated \
            ../../../atra-proto/proto/orderbook.proto
          sed -i 's/import orderbook_pb2/import atra_cli_core.generated.orderbook_pb2/' generated/orderbook_pb2_grpc.py
          touch generated/__init__.py

      - name: Prepare Docker Image Tags
        id: prep_tags
        shell: bash
        run: |
          GIT_COMMIT_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "Extracted GIT_COMMIT_SHA_SHORT: $GIT_COMMIT_SHA_SHORT"
          echo "git_commit_sha_short=$GIT_COMMIT_SHA_SHORT" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            RAW_BRANCH_NAME="${{ github.head_ref }}"
          else
            RAW_BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "Raw branch name: $RAW_BRANCH_NAME"

          SANITIZED_BRANCH_NAME=$(echo "$RAW_BRANCH_NAME" | sed 's/[^a-zA-Z0-9_.-]/-/g')
          echo "Sanitized branch name: $SANITIZED_BRANCH_NAME"
          echo "sanitized_branch_name=$SANITIZED_BRANCH_NAME" >> $GITHUB_OUTPUT

          FINAL_IMAGE_TAG="$SANITIZED_BRANCH_NAME-$GIT_COMMIT_SHA_SHORT"
          echo "Final IMAGE_TAG: $FINAL_IMAGE_TAG"
          echo "final_image_tag=$FINAL_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build services with docker-compose
        env:
          IMAGE_TAG: ${{ steps.prep_tags.outputs.final_image_tag }}
          GIT_COMMIT_SHA: ${{ github.sha }}
        run: |
          docker compose build

      - name: Start services with docker compose
        env:
          IMAGE_TAG: ${{ steps.prep_tags.outputs.final_image_tag }}
          GIT_COMMIT_SHA: ${{ github.sha }}
        run: |
          docker compose up -d matcher gateway

          echo "Waiting for services to be healthy..."
          end_time=$((SECONDS + 120))
          matcher_healthy="false"
          gateway_healthy="false"

          while [ $SECONDS -lt $end_time ]; do
            if [ "$matcher_healthy" != "true" ]; then
              matcher_status=$(docker compose ps -q matcher | xargs docker inspect --format='{{.State.Health.Status}}' 2>/dev/null)
              if [ "$matcher_status" == "healthy" ]; then
                echo "Matcher service is healthy!"
                matcher_healthy="true"
              else
                echo -n "M($matcher_status) "
              fi
            fi

            if [ "$gateway_healthy" != "true" ]; then
              gateway_status=$(docker compose ps -q gateway | xargs docker inspect --format='{{.State.Health.Status}}' 2>/dev/null)
              if [ "$gateway_status" == "healthy" ]; then
                echo "Gateway service is healthy!"
                gateway_healthy="true"
              else
                echo -n "G($gateway_status) "
              fi
            fi

            # Exit loop if both are healthy
            if [ "$matcher_healthy" == "true" ] && [ "$gateway_healthy" == "true" ]; then
              break
            fi

            sleep 2
          done

          if [ "$matcher_healthy" != "true" ] || [ "$gateway_healthy" != "true" ]; then
            echo
            echo "One or more services did not become healthy in time."
            echo "--- Matcher Logs ---"
            docker compose logs matcher
            echo "--- Gateway Logs ---"
            docker compose logs gateway
            exit 1
          fi

      - name: Run integration tests 
        env:
          atra_OB_HOST: localhost
          atra_OB_PORT: 50052
        run: |
          cd cli
          chmod +x integration_tests.sh
          ./integration_tests.sh

      - name: Move cache
        if: "!cancelled()"
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        continue-on-error: true

      - name: Save Docker cache
        if: "!cancelled()"
        uses: actions/cache/save@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ steps.docker-cache-key.outputs.cache_key }}

      - name: Cleanup
        if: always()
        run: |
          docker compose down
